diff --git a/Tensile/AsmCaps.py b/Tensile/AsmCaps.py
index 548b31f2..de4c2dd5 100644
--- a/Tensile/AsmCaps.py
+++ b/Tensile/AsmCaps.py
@@ -771,6 +771,50 @@ CACHED_ASM_CAPS = \
               'v_mov_b64': False,
               'v_pk_fma_f16': True,
               'v_pk_fmac_f16': False},
+ (11, 0, 3): {'HasAddLshl': True,
+              'HasAtomicAdd': True,
+              'HasDirectToLdsDest': False,
+              'HasDirectToLdsNoDest': False,
+              'HasExplicitCO': True,
+              'HasExplicitNC': True,
+              'HasGLCModifier': True,
+              'HasNTModifier': False,
+              'HasLshlOr': True,
+              'HasMFMA': False,
+              'HasMFMA_b8': False,
+              'HasMFMA_bf16_1k': False,
+              'HasMFMA_bf16_original': False,
+              'HasMFMA_constSrc': False,
+              'HasMFMA_f64': False,
+              'HasMFMA_f8': False,
+              'HasMFMA_i8_908': False,
+              'HasMFMA_i8_940': False,
+              'HasMFMA_vgpr': False,
+              'HasMFMA_xf32': False,
+              'HasSMulHi': True,
+              'HasWMMA': True,
+              'KernargPreloading': False,
+              'MaxLgkmcnt': 15,
+              'MaxVmcnt': 63,
+              'SupportedISA': True,
+              'SupportedSource': True,
+              'VOP3v_dot4_i32_i8': False,
+              'v_dot2_f32_f16': True,
+              'v_dot2c_f32_f16': True,
+              'v_dot4_i32_i8': False,
+              'v_dot4c_i32_i8': False,
+              'v_fma_f16': True,
+              'v_fma_f32': True,
+              'v_fma_f64': True,
+              'v_fma_mix_f32': True,
+              'v_fmac_f16': False,
+              'v_fmac_f32': True,
+              'v_mac_f16': False,
+              'v_mac_f32': False,
+              'v_mad_mix_f32': False,
+              'v_mov_b64': False,
+              'v_pk_fma_f16': True,
+              'v_pk_fmac_f16': False},
  (11, 5, 1): {'HasAddLshl': True,
               'HasAtomicAdd': True,
               'HasDirectToLdsDest': False,
diff --git a/Tensile/Common.py b/Tensile/Common.py
index 66f2caa2..4a77df59 100644
--- a/Tensile/Common.py
+++ b/Tensile/Common.py
@@ -253,7 +253,7 @@ globalParameters["SupportedISA"] = [(8,0,3),
                                     (9,0,0), (9,0,6), (9,0,8), (9,0,10),
                                     (9,4,0), (9,4,1), (9,4,2),
                                     (10,1,0), (10,1,1), (10,1,2), (10,3,0), (10,3,1),
-                                    (11,0,0), (11,0,1), (11,0,2),
+                                    (11,0,0), (11,0,1), (11,0,2), (11,0,3),
                                     (11,5,1),
                                     (12,0,0), (12,0,1)] # assembly kernels writer supports these architectures
 
@@ -316,7 +316,7 @@ globalParameters["SeparateArchitectures"] = False # write Tensile library metada
 
 globalParameters["LazyLibraryLoading"] = False # Load library and code object files when needed instead of at startup
 
-globalParameters["IgnoreAsmCapCache"] = False # Ignore checking for discrepancies between derived and cached asm caps
+globalParameters["IgnoreAsmCapCache"] = True # Ignore checking for discrepancies between derived and cached asm caps
 
 globalParameters["ExperimentalLogicDir"] = "/experimental/"
 
@@ -328,13 +328,13 @@ architectureMap = {
   'all':'_','gfx000':'none', 'gfx803':'r9nano', 'gfx900':'vega10', 'gfx900:xnack-':'vega10',
   'gfx906':'vega20', 'gfx906:xnack+':'vega20', 'gfx906:xnack-':'vega20',
   'gfx908':'arcturus','gfx908:xnack+':'arcturus', 'gfx908:xnack-':'arcturus',
-  'gfx90a':'aldebaran', 'gfx90a:xnack+':'aldebaran', 'gfx90a:xnack-':'aldebaran',
+  'gfx90a':'aldebaran', 'gfx90a:xnack+':'aldebaran', 'gfx90a:xnack-':'aldebaran', 'gfx90c':'gfx90c',
   'gfx940':'aquavanjaram', 'gfx940:xnack+':'aquavanjaram', 'gfx940:xnack-':'aquavanjaram',
   'gfx941':'aquavanjaram941', 'gfx941:xnack+':'aquavanjaram941', 'gfx941:xnack-':'aquavanjaram941',
   'gfx942':'aquavanjaram942', 'gfx942:xnack+':'aquavanjaram942', 'gfx942:xnack-':'aquavanjaram942',
   'gfx1010':'navi10', 'gfx1011':'navi12', 'gfx1012':'navi14',
   'gfx1030':'navi21', 'gfx1031':'navi22', 'gfx1032':'navi23', 'gfx1034':'navi24', 'gfx1035':'rembrandt',
-  'gfx1100':'navi31', 'gfx1101':'navi32', 'gfx1102':'navi33',
+  'gfx1100':'navi31', 'gfx1101':'navi32', 'gfx1102':'navi33', 'gfx1103':'phoenix',
   'gfx1151':'gfx1151',
   'gfx1200':'gfx1200',
   'gfx1201':'gfx1201'
@@ -2461,7 +2461,7 @@ def assignGlobalParameters( config ):
     if os.name == "nt":
       globalParameters["CurrentISA"] = (9,0,6)
       printWarning("Failed to detect ISA so forcing (gfx906) on windows")
-  isasWithDisabledHWMonitor = ((9,4,1), (9,4,2), (11,0,0), (11,0,1), (11,0,2), (12,0,0), (12,0,1))
+  isasWithDisabledHWMonitor = ((9,4,1), (9,4,2), (11,0,0), (11,0,1), (11,0,2), (11,0,3), (12,0,0), (12,0,1))
   if globalParameters["CurrentISA"] in isasWithDisabledHWMonitor:
     isaString = ', '.join(map(gfxName, isasWithDisabledHWMonitor))
     printWarning(f"HardwareMonitor currently disabled for {isaString}")
diff --git a/Tensile/Source/CMakeLists.txt b/Tensile/Source/CMakeLists.txt
index e02b209a..4d13ade3 100644
--- a/Tensile/Source/CMakeLists.txt
+++ b/Tensile/Source/CMakeLists.txt
@@ -51,9 +51,9 @@ if(CMAKE_CXX_COMPILER MATCHES ".*/hipcc$" OR CMAKE_CXX_COMPILER MATCHES ".*clang
 endif()
 
 if(CMAKE_CXX_COMPILER STREQUAL "hipcc")
-  set(TENSILE_GPU_ARCHS gfx803 gfx900 gfx906:xnack- gfx908:xnack- gfx90a:xnack- gfx1010 gfx1011 gfx1012 gfx1030 gfx1031 gfx1032 gfx1034 gfx1035 gfx1100 gfx1101 gfx1102 CACHE STRING "GPU architectures")
+  set(TENSILE_GPU_ARCHS gfx803 gfx900 gfx906:xnack- gfx908:xnack- gfx90a:xnack- gfx90c gfx1010 gfx1011 gfx1012 gfx1030 gfx1031 gfx1032 gfx1034 gfx1035 gfx1100 gfx1101 gfx1102 gfx1103 CACHE STRING "GPU architectures")
 else()
-  set(TENSILE_GPU_ARCHS gfx803 gfx900 gfx906 gfx908 gfx90a gfx1010 gfx1011 gfx1012 gfx1030 gfx1031 gfx1032 gfx1034 gfx1035 gfx1100 gfx1101 gfx1102 CACHE STRING "GPU architectures")
+  set(TENSILE_GPU_ARCHS gfx803 gfx900 gfx906 gfx908 gfx90a gfx90c gfx1010 gfx1011 gfx1012 gfx1030 gfx1031 gfx1032 gfx1034 gfx1035 gfx1100 gfx1101 gfx1102 gfx1103 CACHE STRING "GPU architectures")
 endif()
 
 include(CMakeDependentOption)
diff --git a/Tensile/Source/lib/include/Tensile/AMDGPU.hpp b/Tensile/Source/lib/include/Tensile/AMDGPU.hpp
index 0ab8ced5..0d7a5930 100644
--- a/Tensile/Source/lib/include/Tensile/AMDGPU.hpp
+++ b/Tensile/Source/lib/include/Tensile/AMDGPU.hpp
@@ -60,6 +60,7 @@ namespace Tensile
             gfx906  = 906,
             gfx908  = 908,
             gfx90a  = 910,
+            gfx90c  = 912,
             gfx940  = 940,
             gfx941  = 941,
             gfx942  = 942,
@@ -73,7 +74,8 @@ namespace Tensile
             gfx1035 = 1035,
             gfx1100 = 1100,
             gfx1101 = 1101,
-            gfx1102 = 1102
+            gfx1102 = 1102,
+            gfx1103 = 1103
         };
 
         static std::string toString(Processor p)
@@ -90,6 +92,8 @@ namespace Tensile
                 return "gfx908";
             case AMDGPU::Processor::gfx90a:
                 return "gfx90a";
+            case AMDGPU::Processor::gfx90c:
+                return "gfx90c";
             case AMDGPU::Processor::gfx940:
                 return "gfx940";
             case AMDGPU::Processor::gfx941:
@@ -118,6 +122,8 @@ namespace Tensile
                 return "gfx1101";
             case AMDGPU::Processor::gfx1102:
                 return "gfx1102";
+            case AMDGPU::Processor::gfx1103:
+                return "gfx1103";
             }
             return "";
         }
@@ -144,6 +150,10 @@ namespace Tensile
             {
                 return AMDGPU::Processor::gfx90a;
             }
+            else if(deviceString.find("gfx90c") != std::string::npos)
+            {
+                return AMDGPU::Processor::gfx90c;
+            }
             else if(deviceString.find("gfx940") != std::string::npos)
             {
                 return AMDGPU::Processor::gfx940;
@@ -184,6 +194,10 @@ namespace Tensile
             {
                 return AMDGPU::Processor::gfx1102;
             }
+            else if(deviceString.find("gfx1103") != std::string::npos)
+            {
+                return AMDGPU::Processor::gfx1103;
+            }
             else
             {
                 return static_cast<AMDGPU::Processor>(0);
diff --git a/Tensile/Source/lib/include/Tensile/PlaceholderLibrary.hpp b/Tensile/Source/lib/include/Tensile/PlaceholderLibrary.hpp
index 10898ec2..f6b5305e 100644
--- a/Tensile/Source/lib/include/Tensile/PlaceholderLibrary.hpp
+++ b/Tensile/Source/lib/include/Tensile/PlaceholderLibrary.hpp
@@ -44,6 +44,7 @@ namespace Tensile
         gfx906,
         gfx908,
         gfx90a,
+        gfx90c,
         gfx940,
         gfx941,
         gfx942,
@@ -58,6 +59,7 @@ namespace Tensile
         gfx1100,
         gfx1101,
         gfx1102,
+        gfx1103,
         All
     };
 
@@ -78,6 +80,8 @@ namespace Tensile
             return "TensileLibrary_*_gfx908";
         case LazyLoadingInit::gfx90a:
             return "TensileLibrary_*_gfx90a";
+        case LazyLoadingInit::gfx90c:
+            return "TensileLibrary_*_gfx90c";
         case LazyLoadingInit::gfx940:
             return "TensileLibrary_*_gfx940";
         case LazyLoadingInit::gfx941:
@@ -106,6 +110,8 @@ namespace Tensile
             return "TensileLibrary_*_gfx1101";
         case LazyLoadingInit::gfx1102:
             return "TensileLibrary_*_gfx1102";
+        case LazyLoadingInit::gfx1103:
+            return "TensileLibrary_*_gfx1103";
         case LazyLoadingInit::None:
             return "";
         }
diff --git a/Tensile/Source/lib/include/Tensile/Serialization/Predicates.hpp b/Tensile/Source/lib/include/Tensile/Serialization/Predicates.hpp
index 87fc0d24..f0c7fef4 100644
--- a/Tensile/Source/lib/include/Tensile/Serialization/Predicates.hpp
+++ b/Tensile/Source/lib/include/Tensile/Serialization/Predicates.hpp
@@ -218,6 +218,7 @@ namespace Tensile
                 iot::enumCase(io, value, "gfx906", AMDGPU::Processor::gfx906);
                 iot::enumCase(io, value, "gfx908", AMDGPU::Processor::gfx908);
                 iot::enumCase(io, value, "gfx90a", AMDGPU::Processor::gfx90a);
+                iot::enumCase(io, value, "gfx90c", AMDGPU::Processor::gfx90c);
                 iot::enumCase(io, value, "gfx940", AMDGPU::Processor::gfx940);
                 iot::enumCase(io, value, "gfx941", AMDGPU::Processor::gfx941);
                 iot::enumCase(io, value, "gfx942", AMDGPU::Processor::gfx942);
@@ -232,6 +233,7 @@ namespace Tensile
                 iot::enumCase(io, value, "gfx1100", AMDGPU::Processor::gfx1100);
                 iot::enumCase(io, value, "gfx1101", AMDGPU::Processor::gfx1101);
                 iot::enumCase(io, value, "gfx1102", AMDGPU::Processor::gfx1102);
+                iot::enumCase(io, value, "gfx1103", AMDGPU::Processor::gfx1103);
             }
         };
 
diff --git a/Tensile/Source/lib/source/ocl/OclUtils.cpp b/Tensile/Source/lib/source/ocl/OclUtils.cpp
index 8ee6d217..bd67cfd7 100644
--- a/Tensile/Source/lib/source/ocl/OclUtils.cpp
+++ b/Tensile/Source/lib/source/ocl/OclUtils.cpp
@@ -148,6 +148,10 @@ namespace Tensile
             {
                 return AMDGPU::Processor::gfx90a;
             }
+            else if(deviceString.find("gfx90c") != std::string::npos)
+            {
+                return AMDGPU::Processor::gfx90c;
+            }
             else if(deviceString.find("gfx940") != std::string::npos)
             {
                 return AMDGPU::Processor::gfx940;
@@ -188,6 +192,10 @@ namespace Tensile
             {
                 return AMDGPU::Processor::gfx1102;
             }
+            else if(deviceString.find("gfx1103") != std::string::npos)
+            {
+                return AMDGPU::Processor::gfx1103;
+            }
             else
             {
                 return static_cast<AMDGPU::Processor>(0);
diff --git a/Tensile/TensileCreateLib/ParseArguments.py b/Tensile/TensileCreateLib/ParseArguments.py
index 6970caba..5dc6406c 100644
--- a/Tensile/TensileCreateLib/ParseArguments.py
+++ b/Tensile/TensileCreateLib/ParseArguments.py
@@ -239,7 +239,7 @@ def parseArguments(input: Optional[List[str]] = None) -> Dict[str, Any]:
         "--ignore-asm-cap-cache",
         dest="IgnoreAsmCapCache",
         action="store_true",
-        default=False,
+        default=True,
         help="Ignore ASM capabilities cache and derive the capabilities at runtime.",
     )
     parser.add_argument(
diff --git a/docs/src/cli-reference/TensileCreateLibrary.rst b/docs/src/cli-reference/TensileCreateLibrary.rst
index 6e22a2c7..09345113 100644
--- a/docs/src/cli-reference/TensileCreateLibrary.rst
+++ b/docs/src/cli-reference/TensileCreateLibrary.rst
@@ -35,9 +35,9 @@ When invoking *TensileCreateLibrary*, one can provide zero or more options.
     Architectures to generate a library for. When specifying multiple options, use quoted, semicolon delimited 
     architectures, e.g., --architecture='gfx908;gfx1012'.
     Supported architectures include: all gfx000 gfx803 gfx900 gfx900:xnack- gfx906 gfx906:xnack+ gfx906:xnack- gfx908 gfx908:xnack+
-    gfx908:xnack- gfx90a gfx90a:xnack+ gfx90a:xnack- gfx940 gfx940:xnack+ gfx940:xnack- gfx941 gfx941:xnack+
+    gfx908:xnack- gfx90a gfx90a:xnack+ gfx90a:xnack- gfx90c gfx940 gfx940:xnack+ gfx940:xnack- gfx941 gfx941:xnack+
     gfx941:xnack- gfx942 gfx942:xnack+ gfx942:xnack- gfx1010 gfx1011 gfx1012 gfx1030 gfx1031 gfx1032 gfx1034 gfx1035
-    gfx1100 gfx1101 gfx1102.
+    gfx1100 gfx1101 gfx1102 gfx1103.
 \-\-build-client
     Build Tensile client executable; used for stand alone benchmarking (default).
 \-\-client-config 
diff --git a/pytest.ini b/pytest.ini
index 13c43039..23a53d35 100644
--- a/pytest.ini
+++ b/pytest.ini
@@ -92,6 +92,7 @@ markers =
  xfail-gfx906:  architecture
  xfail-gfx908:  architecture
  xfail-gfx90a:  architecture
+ xfail-gfx90c:  architecture
  xfail-gfx940:  architecture
  xfail-gfx941:  architecture
  xfail-gfx942:  architecture
@@ -106,11 +107,13 @@ markers =
  xfail-gfx1100: architecture
  xfail-gfx1101: architecture
  xfail-gfx1102: architecture
+ xfail-gfx1103: architecture
  skip-gfx000:  architecture
  skip-gfx900:  architecture
  skip-gfx906:  architecture
  skip-gfx908:  architecture
  skip-gfx90a:  architecture
+ skip-gfx90c:  architecture
  skip-gfx940:  architecture
  skip-gfx941:  architecture
  skip-gfx942:  architecture
@@ -125,4 +128,5 @@ markers =
  skip-gfx1100: architecture
  skip-gfx1101: architecture
  skip-gfx1102: architecture
+ skip-gfx1103: architecture
  skip-gfx1151: architecture
